{
 "cells": [
  {
   "metadata": {},
   "cell_type": "code",
   "outputs": [],
   "execution_count": null,
   "source": [
    "import os\n",
    "import shutil\n",
    "import requests\n",
    "from openpyxl import load_workbook\n",
    "\n",
    "# === Настройки ===\n",
    "WEBHOOK_URL = \"https://labkabinet.bitrix24.ru/rest/6808/9wti8nc7t0j9r2c7/\"\n",
    "DEAL_ID = 25034\n",
    "TEMPLATE_FILE = \"Расчет_шаблон_V1.xlsx\"\n",
    "OUTPUT_DIR = \"Расчеты\"\n",
    "OUTPUT_FILE = os.path.join(OUTPUT_DIR, f\"расчет_{DEAL_ID}.xlsx\")\n",
    "\n",
    "# === Справочник поставщиков (из листа \"Справочник\") ===\n",
    "SUPPLIER_MAP = {\n",
    "    \"ООО\": {\n",
    "        \"name\": 'ООО \"Научные развлечения\"',\n",
    "        \"vat_in\": \"НДС 20%\",\n",
    "        \"shipping_city\": \"Москва\"\n",
    "    },\n",
    "    # Можно добавить другие поставщики\n",
    "}\n",
    "\n",
    "# === 1. Получение строк товаров из сделки ===\n",
    "def get_deal_product_rows(deal_id):\n",
    "    url = f\"{WEBHOOK_URL}crm.deal.productrows.get\"\n",
    "    response = requests.post(url, json={\"id\": deal_id})\n",
    "    response.raise_for_status()\n",
    "    return response.json().get(\"result\", [])\n",
    "\n",
    "# === 2. Получение данных товара из каталога магазина ===\n",
    "def get_catalog_product(product_id):\n",
    "    url = f\"{WEBHOOK_URL}catalog.product.get\"\n",
    "    response = requests.post(url, json={\"id\": product_id})\n",
    "    if response.status_code == 200:\n",
    "        return response.json().get(\"result\", {})\n",
    "    else:\n",
    "        print(f\"⚠️ Не удалось загрузить товар ID={product_id}\")\n",
    "        return None\n",
    "\n",
    "from openpyxl import load_workbook\n",
    "\n",
    "def fill_excel(products, output_path):\n",
    "    os.makedirs(os.path.dirname(output_path), exist_ok=True)\n",
    "    shutil.copy(TEMPLATE_FILE, output_path)\n",
    "\n",
    "    wb = load_workbook(output_path)\n",
    "    ws_calc = wb[\"Калькулятор\"]\n",
    "    ws_ship = wb[\"Доставка\"]\n",
    "\n",
    "    # === 1. Лист \"Доставка\" — заполняем только входные данные ===\n",
    "    # Очищаем только входные столбцы (A–H), формулы в I–K останутся\n",
    "    for row in range(3, 43):\n",
    "        for col in \"ABCDEFGH\":\n",
    "            ws_ship[f\"{col}{row}\"].value = None\n",
    "\n",
    "    for i, p in enumerate(products):\n",
    "        r = i + 3\n",
    "        ws_ship[f\"B{r}\"] = p[\"name\"]\n",
    "        ws_ship[f\"C{r}\"] = p[\"quantity\"]\n",
    "        ws_ship[f\"D{r}\"] = p[\"supplier\"]\n",
    "        ws_ship[f\"E{r}\"] = p[\"shipping_city\"]\n",
    "        ws_ship[f\"F{r}\"] = p[\"weight_g\"]\n",
    "        ws_ship[f\"G{r}\"] = p[\"length_mm\"]\n",
    "        ws_ship[f\"H{r}\"] = p[\"width_mm\"]\n",
    "        ws_ship[f\"I{r}\"] = p[\"height_mm\"]\n",
    "\n",
    "    # Строка \"Итого\" на листе \"Доставка\" — формулы уже есть, только текст\n",
    "    last_row_ship = len(products) + 2\n",
    "    ws_ship[f\"A{last_row_ship}\"] = \"Итого\"\n",
    "\n",
    "    # === 2. Лист \"Калькулятор\" — заполняем ТОЛЬКО входные ячейки ===\n",
    "    start_row = 3\n",
    "    max_rows = 40  # строки 3–42\n",
    "\n",
    "    # Очищаем только входные столбцы (B–G), остальное — формулы!\n",
    "    for i in range(max_rows):\n",
    "        r = start_row + i\n",
    "        for col in \"BCDEFG\":\n",
    "            ws_calc[f\"{col}{r}\"].value = None\n",
    "\n",
    "    # Заполняем реальные товары\n",
    "    for i, p in enumerate(products):\n",
    "        r = start_row + i\n",
    "        ws_calc[f\"B{r}\"] = p[\"name\"]\n",
    "        ws_calc[f\"C{r}\"] = p[\"quantity\"]\n",
    "        ws_calc[f\"D{r}\"] = p[\"price_with_vat\"]\n",
    "        ws_calc[f\"E{r}\"] = p[\"supplier\"]\n",
    "        ws_calc[f\"F{r}\"] = p[\"vat_in\"]\n",
    "        ws_calc[f\"G{r}\"] = p[\"link\"]\n",
    "\n",
    "    # Строка \"Доставка\" (43) — заполняем только входные поля\n",
    "    ws_calc[f\"B43\"] = \"Доставка\"\n",
    "    ws_calc[f\"C43\"] = 1\n",
    "    ws_calc[f\"D43\"] = 27900  # можно параметризовать\n",
    "    ws_calc[f\"E43\"] = \"СДЭК\"\n",
    "    ws_calc[f\"F43\"] = \"УСН\"\n",
    "    ws_calc[f\"G43\"] = \"\"\n",
    "\n",
    "    # Строка \"Итого\" (44) — только текст, формулы уже есть\n",
    "    ws_calc[f\"B44\"] = \"Итого\"\n",
    "\n",
    "    # === Скрываем пустые строки с товарами ===\n",
    "    num_products = len(products)\n",
    "    for i in range(num_products, max_rows):\n",
    "        r = start_row + i\n",
    "        ws_calc.row_dimensions[r].hidden = True\n",
    "\n",
    "    # Строки \"Доставка\" (43) и \"Итого\" (44) — всегда видимы\n",
    "    ws_calc.row_dimensions[43].hidden = False\n",
    "    ws_calc.row_dimensions[44].hidden = False\n",
    "\n",
    "    wb.save(output_path)\n",
    "    return output_path\n",
    "\n",
    "# === Основная логика ===\n",
    "def main():\n",
    "    print(\"1️⃣ Получаем строки товаров из сделки...\")\n",
    "    rows = get_deal_product_rows(DEAL_ID)\n",
    "    if not rows:\n",
    "        print(\"❌ В сделке нет товаров.\")\n",
    "        return\n",
    "\n",
    "    print(\"2️⃣ Загружаем данные из каталога...\")\n",
    "    products_for_excel = []\n",
    "\n",
    "    for row in rows:\n",
    "        product_id = row.get(\"PRODUCT_ID\")\n",
    "        name = row.get(\"PRODUCT_NAME\", \"\").strip()\n",
    "        quantity = row.get(\"QUANTITY\", 1)\n",
    "        price_with_vat = row.get(\"PRICE\", 0)\n",
    "\n",
    "        # Если название пустое — пропускаем или подставляем заглушку\n",
    "        if not name:\n",
    "            name = f\"Товар ID={product_id}\" if product_id else \"Неизвестный товар\"\n",
    "\n",
    "        catalog_data = None\n",
    "        if product_id:\n",
    "            catalog_data = get_catalog_product(product_id)\n",
    "\n",
    "        # Извлечение данных из каталога\n",
    "        product = catalog_data.get(\"product\", {}) if catalog_data else {}\n",
    "\n",
    "        # Поставщик\n",
    "        supplier_enum = product.get(\"property196\", {}).get(\"valueEnum\", \"\")\n",
    "        supplier_info = SUPPLIER_MAP.get(supplier_enum, {\n",
    "            \"name\": supplier_enum or \"Не указан\",\n",
    "            \"vat_in\": \"НДС 20%\",\n",
    "            \"shipping_city\": \"Москва\"\n",
    "        })\n",
    "\n",
    "        # Габариты и вес\n",
    "        weight_g = product.get(\"weight\", 0)\n",
    "        length_mm = product.get(\"length\", 0)\n",
    "        width_mm = product.get(\"width\", 0)\n",
    "        height_mm = product.get(\"height\", 0)\n",
    "\n",
    "        # Ссылка — пока не приходит, но можно добавить позже\n",
    "        link = \"\"\n",
    "\n",
    "        products_for_excel.append({\n",
    "            \"name\": name,\n",
    "            \"quantity\": quantity,\n",
    "            \"price_with_vat\": price_with_vat,\n",
    "            \"supplier\": supplier_info[\"name\"],\n",
    "            \"vat_in\": supplier_info[\"vat_in\"],\n",
    "            \"shipping_city\": supplier_info[\"shipping_city\"],\n",
    "            \"weight_g\": weight_g,\n",
    "            \"length_mm\": length_mm,\n",
    "            \"width_mm\": width_mm,\n",
    "            \"height_mm\": height_mm,\n",
    "            \"link\": link,\n",
    "        })\n",
    "\n",
    "    print(\"3️⃣ Заполняем Excel...\")\n",
    "    output_file = fill_excel(products_for_excel, OUTPUT_FILE)\n",
    "    print(f\"✅ Готово! Файл сохранён: {output_file}\")\n",
    "\n",
    "# === Запуск ===\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ],
   "id": "e0937c9590a57ef2"
  },
  {
   "metadata": {},
   "cell_type": "code",
   "outputs": [],
   "execution_count": null,
   "source": "",
   "id": "bd6aac09dd317b6"
  },
  {
   "metadata": {},
   "cell_type": "code",
   "outputs": [],
   "execution_count": null,
   "source": "",
   "id": "dd26a20a582d9665"
  }
 ],
 "metadata": {
  "kernelspec": {
   "name": "python3",
   "language": "python",
   "display_name": "Python 3 (ipykernel)"
  }
 },
 "nbformat": 5,
 "nbformat_minor": 9
}
