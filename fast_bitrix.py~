import json

from fast_bitrix24 import Bitrix
import pandas as pd

webhook = "https://labkabinet.bitrix24.ru/rest/6808/9wti8nc7t0j9r2c7/"
bx = Bitrix(webhook)

def get_all_deal_fields_dict(deal_id: int, webhook: str):

    try:
        # Вызываем метод crm.deal.fields через fast_bitrix24
        fields_info = bx.call('crm.deal.fields')

        # Создаём словарь: { 'Служебное имя поля': 'listLabel' }
        result_dict = {}
        for field_code, field_info in fields_info.items():
            label = field_info.get('listLabel')
            if label:
                result_dict[field_code] = label

        return result_dict

    except Exception as e:
        print(f"❌ Ошибка при получении списка полей: {e}")
        return {}  # Возвращаем пустой словарь в случае ошибки

def get_deal(deal_id: int):
    # Получаем сделку и возвращаем словарь с её полями
    result=bx.call('crm.deal.get', {'id': deal_id})
    return result['order0000000000']


import requests

def get_all_deal_fields_dict(deal_id: int, webhook=webhook):
    webhook = webhook.strip()  # Убираем пробелы в конце
    method = "crm.deal.fields"
    url = f"{webhook}{method}"

    try:
        response = requests.get(url)
        response.raise_for_status()
        fields_info = response.json().get('result', {})

        # Создаём словарь: { 'Служебное имя поля': 'listLabel' }
        result_dict = {}
        for field_code, field_info in fields_info.items():
            label = field_info.get('listLabel')
            if label:
                result_dict[field_code] = label

        return result_dict

    except Exception as e:
        print(f"❌ Ошибка при получении списка полей: {e}")
        return {}  # Возвращаем пустой словарь в случае ошибки




def get_deal_fields_dataframe(deal_id: int, webhook: str):
    bx = Bitrix(webhook.strip())

    try:
        # # 1. Получаем информацию о полях сделки
        fields_info = bx.call('crm.deal.fields',{'id': deal_id})['order0000000000']
        print(fields_info)

        # 2. Получаем значения полей конкретной сделки
        deal_data = bx.call('crm.deal.get', {'id': deal_id})['order0000000000']
        print(deal_data)

        # 3. Формируем DataFrame
        # Список словарей для DataFrame
        rows = []
        for field_code, field_info in fields_info.items():
            label = field_info.get('listLabel')

            value = deal_data.get(field_code, None)
            rows.append({
                'field_code': field_code,
                'label': label,
                'value': value
            })

        df = pd.DataFrame(rows)
        return df

    except Exception as e:
        print(f"❌ Ошибка при получении данных: {e}")
        return pd.DataFrame()  # Возвращаем пустой DataFrame в случае ошибки




if __name__ == "__main__":
# --- Пример использования ---
    #deal = get_deal(25034)

    # address = deal["UF_CRM_1757930626746"]
    # print(address)
    # address =get_from_deal(deal,"Адрес доставки")
    # #print_deal_fields(25034)
    # field_code = "UF_CRM_1757930626746"
    #
    # print(labels_dict)
    #products = deal['PRODUCT_ROWS'] or deal['ORDER_PRODUCT_ID']
    #print  (products)
    #print_deal_fields(25034)
    df = get_deal_fields_dataframe(25034, webhook=webhook)
    print(df)



