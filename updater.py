# updater.py
import os
import sys
import time
import shutil
import subprocess
from pathlib import Path
from urllib.parse import urljoin
from email.utils import parsedate_to_datetime

import requests


class Updater:
    def __init__(self, base_url: str, files_to_update: list[str], local_dir: str):
        self.base_url = base_url
        self.files_to_update = files_to_update
        self.local_dir = local_dir

    def archive_existing_files(self, target_folder: str, keep_last: int = 5):
        """–ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –≤ –ø–æ–¥–ø–∞–ø–∫—É —Å –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º. –•—Ä–∞–Ω–∏—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –∞—Ä—Ö–∏–≤–æ–≤."""
        target_path = Path(target_folder)
        target_path.mkdir(exist_ok=True)

        files = [f for f in target_path.iterdir() if f.is_file()]
        if not files:
            return

        existing_archives = [d for d in target_path.iterdir() if d.is_dir() and d.name.isdigit()]
        next_archive_num = max([int(d.name) for d in existing_archives], default=0) + 1
        archive_folder = target_path / str(next_archive_num)
        archive_folder.mkdir()

        for file in files:
            shutil.move(str(file), str(archive_folder))

        # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ö–∏–≤–æ–≤
        if len(existing_archives) + 1 > keep_last:
            to_delete = sorted(existing_archives, key=lambda d: int(d.name))[:-keep_last+1]
            for d in to_delete:
                shutil.rmtree(d, ignore_errors=True)

    def check_for_updates(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–ø–æ —Ä–∞–∑–º–µ—Ä—É –∏–ª–∏ –¥–∞—Ç–µ)."""
        for file in self.files_to_update:
            remote_url = urljoin(self.base_url, file)
            local_path = os.path.join(self.local_dir, file)

            try:
                response = requests.get(remote_url, stream=True)
                if response.status_code != 200:
                    print(f"‚ùå {file}: —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª {response.status_code}")
                    continue

                # –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ ‚Üí –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                if not os.path.exists(local_path):
                    print(f"‚ö† {file} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ ‚Üí –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω—É–∂–Ω–æ")
                    return True

                # —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É
                remote_size = int(response.headers.get("Content-Length", 0))
                local_size = os.path.getsize(local_path)
                if remote_size and remote_size != local_size:
                    print(f"‚ö† {file}: —Ä–∞–∑–º–µ—Ä –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è (–ª–æ–∫–∞–ª—å–Ω–æ {local_size}, —Å–µ—Ä–≤–µ—Ä {remote_size})")
                    return True

                # —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –¥–∞—Ç–µ (–µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –æ—Ç–¥–∞–ª Last-Modified)
                remote_time_str = response.headers.get("Last-Modified")
                if remote_time_str:
                    remote_time = parsedate_to_datetime(remote_time_str).timestamp()
                    local_time = os.path.getmtime(local_path)
                    if remote_time > local_time:
                        print(f"‚ö† {file}: —Å–µ—Ä–≤–µ—Ä –Ω–æ–≤–µ–µ (–ª–æ–∫–∞–ª—å–Ω–æ {time.ctime(local_time)}, —Å–µ—Ä–≤–µ—Ä {remote_time_str})")
                        return True

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {file}: {e}")

        return False

    def update_files(self) -> bool:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª—ã."""
        for file in self.files_to_update:
            remote_url = urljoin(self.base_url, file)
            local_path = os.path.join(self.local_dir, file)
            try:
                response = requests.get(remote_url)
                if response.status_code == 200:
                    os.makedirs(os.path.dirname(local_path), exist_ok=True)
                    with open(local_path, "wb") as f:
                        f.write(response.content)
                    print(f"‚úÖ {file} –æ–±–Ω–æ–≤–ª—ë–Ω ({len(response.content)} –±–∞–π—Ç)")
                else:
                    print(f"‚ùå {file}: –æ—à–∏–±–∫–∞ {response.status_code}")
                    return False
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {file}: {e}")
                return False
        return True

    def restart_app(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""
        print("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        subprocess.Popen([sys.executable] + sys.argv)
        sys.exit()

    def auto_update_check(self):
        """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
        print("=== –ù–ê–ß–ê–õ–û –ü–†–û–í–ï–†–ö–ò –û–ë–ù–û–í–õ–ï–ù–ò–ô ===")
        for file in self.files_to_update:
            local_path = os.path.join(self.local_dir, file)
            if os.path.exists(local_path):
                print(f"‚úî {file} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ({os.path.getsize(local_path)} –±–∞–π—Ç)")
            else:
                print(f"‚ö† {file} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

        if self.check_for_updates():
            print("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É...")
            if self.update_files():
                print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
                self.restart_app()
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        else:
            print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
        print("=== –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò –û–ë–ù–û–í–õ–ï–ù–ò–ô ===")

if __name__ == "__main__":
    # Example usage

    import os

    UPDATE_BASE_URL = "https://bitrix24public.com/labkabinet.bitrix24.ru/docs/pub/a74e057419b211005403b334135e4de9/default/"
    FILES_TO_UPDATE = [
        "main.py",
        "gui.pyw",
        "install.bat",
        "–®–∞–±–ª–æ–Ω—ã/–†–∞—Å—á–µ—Ç_—à–∞–±–ª–æ–Ω_V1.xlsx",
        "README.docx",
        "requirements.txt"
    ]
    LOCAL_APP_DIR = os.path.dirname(os.path.abspath(__file__))

    updater = Updater(UPDATE_BASE_URL, FILES_TO_UPDATE, LOCAL_APP_DIR)
    updater.auto_update_check()

