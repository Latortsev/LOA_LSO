import pandas as pd
import requests
from openpyxl import load_workbook
from openpyxl import Workbook
from openpyxl.utils import get_column_letter
from openpyxl.styles import Font, PatternFill
import json  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º json –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ª–æ–∂–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
import os
import shutil
import subprocess
import sys
import threading
import time
from pathlib import Path

from urllib.parse import urljoin

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ===
UPDATE_BASE_URL = "https://bitrix24public.com/labkabinet.bitrix24.ru/docs/pub/a74e057419b211005403b334135e4de9/default/?&"
LOCAL_APP_DIR = os.path.dirname(os.path.abspath(__file__))

# –§–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å
FILES_TO_UPDATE = [
    "main.py",
    "gui.pyw",
    "install.bat",
    "–®–∞–±–ª–æ–Ω—ã/–†–∞—Å—á–µ—Ç_—à–∞–±–ª–æ–Ω_V1.xlsx",
    "README.docx",
    "requirements.txt"
]

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
WEBHOOK_URL = "https://labkabinet.bitrix24.ru/rest/6808/9wti8nc7t0j9r2c7/"
DEAL_ID = 25034
INPUT_DIR = os.path.join(LOCAL_APP_DIR, f"–®–∞–±–ª–æ–Ω—ã")
OUTPUT_DIR = os.path.join(LOCAL_APP_DIR, f"–†–∞—Å—á–µ—Ç—ã")

TEMPLATE_FILE = os.path.join(INPUT_DIR, f"–†–∞—Å—á–µ—Ç_—à–∞–±–ª–æ–Ω_V1.xlsx")

COLUMN_LABELS = {
    # === –ü–æ–ª—è —Å—Ç—Ä–æ–∫–∏ —Å–¥–µ–ª–∫–∏ (DEAL_ROW_*) ===
    "PRODUCT_ID": "ID —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ",
    "PRODUCT_NAME": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–≤ —Å–¥–µ–ª–∫–µ)",
    "PROPERTY_216": "–¶–µ–Ω–∞ –∑–∞–∫—É–ø–∞",
    "QUANTITY": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
    "PROPERTY_228": "–ü–æ—Å—Ç–∞–≤—â–∏–∫",
    "PROPERTY_236": "–°—Ç–∞–≤–∫–∞ –ù–î–°/–≤—Ö–æ–¥—è—â–∏–π",
    "PROPERTY_234": "–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞",
    "PROPERTY_206": "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä",
    "PROPERTY_200": "–ù–∞—Ü–µ–Ω–∫–∞",
    "PRICE": "–¶–µ–Ω–∞ –≤ —Å–¥–µ–ª–∫–µ",
    "TAX_RATE": "–°—Ç–∞–≤–∫–∞ –Ω–∞–ª–æ–≥–∞ (%)",
    "TAX_INCLUDED": "–ù–∞–ª–æ–≥ –≤–∫–ª—é—á—ë–Ω –≤ —Ü–µ–Ω—É",
    "MEASURE_NAME": "–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è",
    "PROPERTY_214": "–û–±—ä—ë–º (–º¬≥)",
    "PROPERTY_232": "–í–µ—Å (–≥)",
    "PROPERTY_238": "–°—Ä–æ–∫ –æ—Ç–≥—Ä—É–∑–∫–∏",
    "PROPERTY_242": "–ë—Ä–æ–Ω–∏—Ä—É–µ—Ç—Å—è? –¥–∞/–Ω–µ—Ç/–ø—Ä—è–º–∞—è",
    "PROPERTY_244": "–†–µ–µ—Å—Ç—Ä –ú–∏–Ω–ø—Ä–æ–º–∞ (–î–∞/–ù–µ—Ç)",
    "PROPERTY_204": "–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞",
    "PROPERTY_212": "–†–µ–µ—Å—Ç—Ä–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –ú–∏–Ω–ø—Ä–æ–º–µ",
    "PRODUCT_DESCRIPTION": "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
    "PROPERTY_194": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
    "SORT": "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞",
    "XML_ID": "–í–Ω–µ—à–Ω–∏–π ID (XML_ID)",
    "TYPE": "–¢–∏–ø —Å—Ç—Ä–æ–∫–∏",
    "STORE_ID": "ID —Å–∫–ª–∞–¥–∞",
    "RESERVE_ID": "ID —Ä–µ–∑–µ—Ä–≤–∞",
    "DATE_RESERVE_END": "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–∞",
    "RESERVE_QUANTITY": "–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ",
    "ID": "ID —Å—Ç—Ä–æ–∫–∏ —Ç–æ–≤–∞—Ä–∞",
    "OWNER_ID": "ID —Å–¥–µ–ª–∫–∏",
    "OWNER_TYPE": "–¢–∏–ø –≤–ª–∞–¥–µ–ª—å—Ü–∞",
    "ORIGINAL_PRODUCT_NAME": "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
    "PRICE_EXCLUSIVE": "–¶–µ–Ω–∞ –±–µ–∑ —Å–∫–∏–¥–æ–∫",
    "PRICE_NETTO": "–¶–µ–Ω–∞ –Ω–µ—Ç—Ç–æ",
    "PRICE_BRUTTO": "–¶–µ–Ω–∞ –±—Ä—É—Ç—Ç–æ",
    "PRICE_ACCOUNT": "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∞—è —Ü–µ–Ω–∞",
    "DISCOUNT_TYPE_ID": "–¢–∏–ø —Å–∫–∏–¥–∫–∏",
    "DISCOUNT_RATE": "–†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ (%)",
    "DISCOUNT_SUM": "–°—É–º–º–∞ —Å–∫–∏–¥–∫–∏",
    "CUSTOMIZED": "–ò–∑–º–µ–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É—é",
    "MEASURE_CODE": "–ö–æ–¥ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è",

    # === –ü–æ–ª—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ (—Ç–æ–≤–∞—Ä–∞) ===
    "NAME": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∫–∞—Ç–∞–ª–æ–≥)",
    "CODE": "–°–∏–º–≤–æ–ª—å–Ω—ã–π –∫–æ–¥",
    "ACTIVE": "–ê–∫—Ç–∏–≤–µ–Ω",
    "CATALOG_ID": "ID –∫–∞—Ç–∞–ª–æ–≥–∞",
    "SECTION_ID": "ID —Ä–∞–∑–¥–µ–ª–∞",
    "DESCRIPTION": "–û–ø–∏—Å–∞–Ω–∏–µ (–∫–∞—Ç–∞–ª–æ–≥)",
    "VAT_ID": "–°—Ç–∞–≤–∫–∞ –ù–î–°",
    "VAT_INCLUDED": "–ù–î–° –≤–∫–ª—é—á—ë–Ω",
    "DESCRIPTION_TYPE": "–¢–∏–ø –æ–ø–∏—Å–∞–Ω–∏—è",
    "CURRENCY_ID": "–í–∞–ª—é—Ç–∞",
    "MEASURE": "–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è (–∫–∞—Ç–∞–ª–æ–≥)",
    "PREVIEW_PICTURE": "–ü—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
    "DETAIL_PICTURE": "–î–µ—Ç–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
    "TIMESTAMP_X": "–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è",
    "DATE_CREATE": "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è",
    "MODIFIED_BY": "–ò–∑–º–µ–Ω–∏–ª",
    "CREATED_BY": "–°–æ–∑–¥–∞–ª",

    # === –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ (PROPERTY_XXX) ===
    # ‚ö†Ô∏è –≠—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è ‚Äî –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è! –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ, –µ—Å–ª–∏ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω—ã–µ.
    "PROPERTY_108": "–ö–∞—Ä—Ç–∏–Ω–∫–∞ —Ç–æ–≤–∞—Ä–∞",
    "PROPERTY_218": "–û–û–û —Å –ù–î–°",
    "PROPERTY_220": "–ò–ü –±–µ–∑ –ù–î–°",
    "PROPERTY_240": "–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞",
    "PROPERTY_202": "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞",


    # === –°–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è –∏–∑ —Ç–≤–æ–µ–≥–æ –∫–æ–¥–∞ ===
    #"ID —Å—Ç—Ä–æ–∫–∏ –≤ —Å–¥–µ–ª–∫–µ": "ID —Å—Ç—Ä–æ–∫–∏ –≤ —Å–¥–µ–ª–∫–µ",
    #"–ò–∑ –∫–∞—Ç–∞–ª–æ–≥–∞?": "–ò–∑ –∫–∞—Ç–∞–ª–æ–≥–∞?",
}

SUPPLIER_MAP = {
    "–û–û–û": {
        "name": '–û–û–û "–ù–∞—É—á–Ω—ã–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"',
        "vat_in": "–ù–î–° 20%",
        "shipping_city": "–ú–æ—Å–∫–≤–∞"
    },
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏
}


def get_deal(deal_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–¥–µ–ª–∫–∏"""
    url = f"{WEBHOOK_URL}crm.deal.get"
    response = requests.post(url, json={"id": DEAL_ID})
    response.raise_for_status()
    return response.json().get("result", {})


def get_catalog_element(element_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    url = f"{WEBHOOK_URL}crm.product.get"
    try:
        response = requests.post(url, json={"id": element_id})
        response.raise_for_status()
        return response.json().get("result", {})
    except requests.exceptions.HTTPError as e:
        if response.status_code == 400:
            print(f"–¢–æ–≤–∞—Ä —Å ID {element_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ (—Ä—É—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è)")
            return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –¥–ª—è —Ä—É—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        else:
            raise e


def archive_existing_files(target_folder):
    """–ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –≤ —Ü–µ–ª–µ–≤–æ–π –ø–∞–ø–∫–µ –≤ –ø–æ–¥–ø–∞–ø–∫–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É."""
    target_path = Path(target_folder)
    target_path.mkdir(exist_ok=True)  # –°–æ–∑–¥–∞—ë–º —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ —Ü–µ–ª–µ–≤–æ–π –ø–∞–ø–∫–µ (–±–µ–∑ –ø–æ–¥–ø–∞–ø–æ–∫)
    files = [f for f in target_path.iterdir() if f.is_file()]

    if not files:
        print("üìÅ –¶–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞ –ø—É—Å—Ç–∞, –∞—Ä—Ö–∏–≤–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä —Å–ª–µ–¥—É—é—â–µ–π –∞—Ä—Ö–∏–≤–Ω–æ–π –ø–∞–ø–∫–∏
    existing_archives = [d for d in target_path.iterdir() if d.is_dir() and d.name.isdigit()]
    next_archive_num = max([int(d.name) for d in existing_archives], default=0) + 1
    archive_folder = target_path / str(next_archive_num)
    archive_folder.mkdir()

    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –∞—Ä—Ö–∏–≤–Ω—É—é –ø–∞–ø–∫—É
    for file in files:
        shutil.move(str(file), str(archive_folder))

    print(f"üì¶ –ê—Ä—Ö–∏–≤–Ω–∞—è –ø–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {archive_folder.name}/")
    print(f"üìä –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")


def check_for_updates():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
    """
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ –∞–¥—Ä–µ—Å—É: {UPDATE_BASE_URL}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        response = requests.get(UPDATE_BASE_URL)
        print(f"HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code != 200:
            print(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {response.status_code}")
            return False

        # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...")
        for file in FILES_TO_UPDATE:
            remote_url = urljoin(UPDATE_BASE_URL, file)
            try:
                head_response = requests.head(remote_url)
                print(f"–§–∞–π–ª {file}: —Å—Ç–∞—Ç—É—Å {head_response.status_code}, –∑–∞–≥–æ–ª–æ–≤–∫–∏: {head_response.headers}")
                if head_response.status_code == 200:
                    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    local_path = os.path.join(LOCAL_APP_DIR, file)
                    if os.path.exists(local_path):
                        local_time = os.path.getmtime(local_path)
                        remote_time_str = head_response.headers.get('Last-Modified')
                        if remote_time_str:
                            # –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                            print(f"  –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª {file} –∏–∑–º–µ–Ω—ë–Ω: {time.ctime(local_time)}")
                            print(f"  –£–¥–∞–ª—ë–Ω–Ω—ã–π —Ñ–∞–π–ª {file} –∏–∑–º–µ–Ω—ë–Ω: {remote_time_str}")
                        else:
                            print(f"  –£ —Ñ–∞–π–ª–∞ {file} –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                    else:
                        print(f"  –§–∞–π–ª {file} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ")
                        return True  # –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                else:
                    print(f"  –§–∞–π–ª {file} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (—Å—Ç–∞—Ç—É—Å {head_response.status_code})")
            except Exception as e:
                print(f"  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {file}: {e}")
                return False
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return False  # –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å

    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
        return False


def update_app():
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª—ã —Å —Å–µ—Ä–≤–µ—Ä–∞.
    """
    print("–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...")
    for file in FILES_TO_UPDATE:
        remote_url = urljoin(UPDATE_BASE_URL, file)
        local_path = os.path.join(LOCAL_APP_DIR, file)

        try:
            print(f"–°–∫–∞—á–∏–≤–∞–µ–º {file} —Å {remote_url}...")
            response = requests.get(remote_url)
            print(f"  –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            if response.status_code == 200:
                print(f"  –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(response.content)} –±–∞–π—Ç")
                with open(local_path, 'wb') as f:
                    f.write(response.content)
                print(f"  –§–∞–π–ª {file} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
            else:
                print(f"  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å {file}, —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                return False
        except Exception as e:
            print(f"  –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {file}: {e}")
            return False
    print("–í—Å–µ —Ñ–∞–π–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.")
    return True


def restart_app():
    """
    –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
    """
    print("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    subprocess.Popen([sys.executable] + sys.argv)
    sys.exit()


def auto_update_check():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
    """
    print("=== –ù–ê–ß–ê–õ–û –ü–†–û–í–ï–†–ö–ò –û–ë–ù–û–í–õ–ï–ù–ò–ô ===")
    print(f"–õ–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞: {LOCAL_APP_DIR}")
    print(f"URL –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {UPDATE_BASE_URL}")
    print(f"–§–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {FILES_TO_UPDATE}")

    # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    for file in FILES_TO_UPDATE:
        local_path = os.path.join(LOCAL_APP_DIR, file)
        if os.path.exists(local_path):
            print(f"  –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª {file} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–∞–∑–º–µ—Ä: {os.path.getsize(local_path)} –±–∞–π—Ç")
        else:
            print(f"  –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª {file} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    has_updates = check_for_updates()

    if has_updates:
        print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
        if update_app():
            print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
            restart_app()
        else:
            print("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
    else:
        print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")

    print("=== –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò –û–ë–ù–û–í–õ–ï–ù–ò–ô ===")


# === 1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Å–¥–µ–ª–∫–∏ ===
def get_deal_products(deal_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ —Å–¥–µ–ª–∫–∏"""
    url = f"{WEBHOOK_URL}crm.deal.productrows.get"
    response = requests.post(url, json={"id": deal_id})
    response.raise_for_status()
    return response.json().get("result", [])


# === 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –º–∞–≥–∞–∑–∏–Ω–∞ ===
def get_catalog_product(product_id):
    url = f"{WEBHOOK_URL}catalog.product.get"
    response = requests.post(url, json={"id": product_id})
    if response.status_code == 200:
        return response.json().get("result", {})
    else:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä ID={product_id}")
        return None


# === 3. –ü–æ–ª–Ω–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ Excel —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–ª—è–º–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–ª–æ–∂–Ω—ã—Ö —Ç–∏–ø–æ–≤ ===
def export_products_to_db(deal_products, output_path):
    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏–∑ —Å–¥–µ–ª–∫–∏ –≤ Excel —Ñ–∞–π–ª —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏.
    –°—Ç–æ–ª–±—Ü—ã –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–∫–∞–∫ –∏–∑ —Å–¥–µ–ª–∫–∏, —Ç–∞–∫ –∏ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞).
    –°–ª–æ–∂–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö (dict, list) —Å–µ—Ä–∏–∞–ª–∏–∑—É—é—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫–∏ JSON.
    :param deal_products: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Å–¥–µ–ª–∫–∏ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç get_deal_product).
    :param output_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
    """
    # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ (—Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
    all_rows_data = []
    # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π (–Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤)
    all_keys = set()

    print("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Å–¥–µ–ª–∫–∏...")
    for product_row in deal_products:
        catalog_product_id = product_row.get("PRODUCT_ID")

        catalog_data = {}
        if catalog_product_id:
            catalog_data = get_catalog_product(catalog_product_id) or {}

        combined_row = {}
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã
        for key, value in product_row.items():
            combined_row[f"DEAL_{key}"] = value

        for key, value in catalog_data.items():
            combined_row[f"CATALOG_{key}"] = value

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ combined_row
        processed_row = {}
        for key, original_value in combined_row.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è
            if isinstance(original_value, (dict, list)):
                # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å–ª–æ–∂–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤ —Å—Ç—Ä–æ–∫—É JSON
                processed_value = json.dumps(original_value, ensure_ascii=False,
                                             indent=2)  # ensure_ascii=False –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
            else:
                # –û—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–µ —Ç–∏–ø—ã –∫–∞–∫ –µ—Å—Ç—å, –∏–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                # –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ str(original_value)
                # processed_value = str(original_value)
                # –ù–æ –ª—É—á—à–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–º–∏—Ç–∏–≤, –∏ —Ç–æ–ª—å–∫–æ —Å–ª–æ–∂–Ω—ã–µ —Ç–∏–ø—ã —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å
                processed_value = original_value

            processed_row[key] = processed_value

        all_rows_data.append(processed_row)
        all_keys.update(processed_row.keys())

    headers = sorted(list(all_keys))

    print(f"–ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π (—Å—Ç–æ–ª–±—Ü–æ–≤): {len(headers)}")
    if not headers:
        print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    wb = Workbook()
    ws = wb.active
    ws.title = "–¢–æ–≤–∞—Ä—ã_–°–¥–µ–ª–∫–∏"

    for col_num, header in enumerate(headers, 1):
        cell = ws.cell(row=1, column=col_num, value=header)
        cell.font = Font(bold=True)
        cell.fill = PatternFill(start_color="D3D3D3", end_color="D3D3D3", fill_type="solid")

    for row_num, row_data in enumerate(all_rows_data, 2):
        for col_num, header in enumerate(headers, 1):
            value = row_data.get(header, "")  # –ó–Ω–∞—á–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ processed_row
            ws.cell(row=row_num, column=col_num, value=value)

    # –ê–≤—Ç–æ–ø–æ–¥–≥–æ–Ω–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤ (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ)
    for column in ws.columns:
        max_length = 0
        column_letter = get_column_letter(column[0].column)
        for cell in column:
            try:
                # –î–ª—è —Å—Ç—Ä–æ–∫, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–∑ JSON, –¥–ª–∏–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–æ–π
                # –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã, –µ—Å–ª–∏ —Å—Ç–æ–ª–±—Ü—ã –ø–æ–ª—É—á–∞—é—Ç—Å—è —Å–ª–∏—à–∫–æ–º —à–∏—Ä–æ–∫–∏–º–∏
                str_val = str(cell.value)
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —à–∏—Ä–∏–Ω—ã, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                display_val = str_val[:50] + "..." if len(str_val) > 50 else str_val
                if len(display_val) > max_length:
                    max_length = len(display_val)
            except:
                pass
        adjusted_width = min(max_length + 2, 50)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É
        ws.column_dimensions[column_letter].width = adjusted_width

    wb.save(output_path)
    print(f"–ü–æ–ª–Ω–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ {output_path}")
    print(f"–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç {len(all_rows_data)} —Å—Ç—Ä–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏ {len(headers)} —Å—Ç–æ–ª–±—Ü–æ–≤.")


def fill_excel(products, deal_id):
    OUTPUT_FILE = os.path.join(OUTPUT_DIR, str(deal_id), f"—Ä–∞—Å—á–µ—Ç_{deal_id}.xlsx")

    os.makedirs(os.path.dirname(OUTPUT_FILE), exist_ok=True)  # ‚Üê –≤–∞–∂–Ω–æ!
    # –®–∞–≥ 3: –ê—Ä—Ö–∏–≤–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
    print("3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã...")
    archive_existing_files(os.path.join(OUTPUT_DIR, str(deal_id)))

    shutil.copy(TEMPLATE_FILE, OUTPUT_FILE)
    wb = load_workbook(OUTPUT_FILE)  # ‚Üê –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –±—ã–ª–æ output_path (–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ)
    ws_calc = wb["–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"]
    ws_ship = wb["–î–æ—Å—Ç–∞–≤–∫–∞"]
    # === –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ "–°–¥–µ–ª–∫–∞" ===
    print("–î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ '–°–¥–µ–ª–∫–∞'...")
    deal = get_deal(deal_id)
    print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏: {list(deal.keys())}")  # –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

    if "–°–¥–µ–ª–∫–∞" in wb.sheetnames:
        ws_deal = wb["–°–¥–µ–ª–∫–∞"]
        print("–ù–∞–π–¥–µ–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ '–°–¥–µ–ª–∫–∞', –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ...")
        fill_deal_sheet(ws_deal, deal, deal_id)
        print("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ '–°–¥–µ–ª–∫–∞' –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    else:
        print("–í–∫–ª–∞–¥–∫–∞ '–°–¥–µ–ª–∫–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —à–∞–±–ª–æ–Ω–µ")
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏: {wb.sheetnames}")

    # === –ó–∞–ø–∏—Å—å —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–¢–æ–≤–∞—Ä—ã" —Å –¥–≤—É—Ö—Å—Ç—Ä–æ—á–Ω–æ–π —à–∞–ø–∫–æ–π ===
    df_products = products_to_excel(deal_id)  # ‚Üê —Å–º. –Ω–∏–∂–µ: —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫!

    if "–¢–æ–≤–∞—Ä—ã" in wb.sheetnames:
        ws_prod = wb["–¢–æ–≤–∞—Ä—ã"]
    else:
        ws_prod = wb.create_sheet("–¢–æ–≤–∞—Ä—ã")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ (–≤ –ø–æ—Ä—è–¥–∫–µ COLUMN_LABELS)
    technical_columns = list(COLUMN_LABELS.keys())

    # 1Ô∏è‚É£ –°—Ç—Ä–æ–∫–∞ 1: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    for col_idx, col_name in enumerate(technical_columns, start=1):
        ws_prod.cell(row=1, column=col_idx, value=col_name)

    # 2Ô∏è‚É£ –°—Ç—Ä–æ–∫–∞ 2: —Ä—É—Å—Å–∫–∏–µ –º–µ—Ç–∫–∏
    for col_idx, col_name in enumerate(technical_columns, start=1):
        ws_prod.cell(row=2, column=col_idx, value=COLUMN_LABELS[col_name])

    # 3Ô∏è‚É£ –°—Ç—Ä–æ–∫–∏ 3+: –¥–∞–Ω–Ω—ã–µ
    for row_idx, row_data in enumerate(df_products.itertuples(index=False, name=None), start=3):
        for col_idx, value in enumerate(row_data, start=1):
            ws_prod.cell(row=row_idx, column=col_idx, value=value)
    # === 1. –õ–∏—Å—Ç "–î–æ—Å—Ç–∞–≤–∫–∞" ‚Äî –∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ===
    # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã (A‚ÄìH), —Ñ–æ—Ä–º—É–ª—ã –≤ I‚ÄìK –æ—Å—Ç–∞–Ω—É—Ç—Å—è
    ##    for row in range(3, 43):
    ##        for col in "ABCDEFGH":
    ##            ws_ship[f"{col}{row}"].value = None
    start_row = 3
    max_rows = 96

    for i, p in enumerate(products):
        r = i + 3
        # ws_ship[f"B{r}"] = p["name"]
        # ws_ship[f"C{r}"] = p["quantity"]
        # ws_ship[f"D{r}"] = p["supplier"]
        ws_ship[f"E{r}"] = p["shipping_city"]
        ws_ship[f"F{r}"] = float(p["weight_g"])
        ws_ship[f"G{r}"] = p["length_mm"]
        ws_ship[f"H{r}"] = p["width_mm"]
        ws_ship[f"I{r}"] = p["height_mm"]
        if p["volume_m3"]:
            ws_ship[f"J{r}"] = float(p["volume_m3"])

    # ws_ship[f"F1"] = p["height_mm"]

    # === –°–∫—Ä—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ ===
    num_products = len(products)
    for i in range(num_products, max_rows):
        r = start_row + i
        ws_ship.row_dimensions[r].hidden = True

    # –°—Ç—Ä–æ–∫–∏ "–î–æ—Å—Ç–∞–≤–∫–∞" (43) –∏ "–ò—Ç–æ–≥–æ" (44) ‚Äî –≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º—ã
    ws_ship.row_dimensions[99].hidden = False
    ws_ship.row_dimensions[100].hidden = False

    # === 2. –õ–∏—Å—Ç "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä" ‚Äî –∑–∞–ø–æ–ª–Ω—è–µ–º –¢–û–õ–¨–ö–û –≤—Ö–æ–¥–Ω—ã–µ —è—á–µ–π–∫–∏ ===
    start_row = 3
    max_rows = 96  # —Å—Ç—Ä–æ–∫–∏ 3‚Äì42

    # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã (B‚ÄìG), –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî —Ñ–æ—Ä–º—É–ª—ã!
    # for i in range(max_rows):
    #     r = start_row + i
    #     for col in "BCDEFG":
    #         ws_calc[f"{col}{r}"].value = None

    # # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    # for i, p in enumerate(products):
    #     r = start_row + i
    #     ws_calc[f"B{r}"] = p["product_id"]
    #     ws_calc[f"C{r}"] = p["name"]
    #     ws_calc[f"D{r}"] = p["quantity"]
    #     ws_calc[f"E{r}"] = float(p["price_purchase"])
    #     ws_calc[f"F{r}"] = p["supplier"]
    #     ws_calc[f"G{r}"] = p["vat_in"]
    #     ws_calc[f"H{r}"] = p["link"]
    #     ws_calc[f"Z{r}"] = p["bron"]
    #     ws_calc[f"Y{r}"] = p["actual"]

    # –°—Ç—Ä–æ–∫–∞ "–î–æ—Å—Ç–∞–≤–∫–∞" (43) ‚Äî –∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥–Ω—ã–µ –ø–æ–ª—è
    # ws_calc[f"–°43"] = "–î–æ—Å—Ç–∞–≤–∫–∞"
    # ws_calc[f"D43"] = 1
    # ws_calc[f"D43"] = 27900  # –º–æ–∂–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞—Ç—å
    # ws_calc[f"E43"] = "–°–î–≠–ö"
    # ws_calc[f"F43"] = "–£–°–ù"
    # ws_calc[f"G43"] = ""

    # –°—Ç—Ä–æ–∫–∞ "–ò—Ç–æ–≥–æ" (44) ‚Äî —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ä–º—É–ª—ã —É–∂–µ –µ—Å—Ç—å
    # ws_calc[f"B44"] = "–ò—Ç–æ–≥–æ"

    # === –°–∫—Ä—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ ===
    num_products = len(products)
    for i in range(num_products, max_rows):
        r = start_row + i
        ws_calc.row_dimensions[r].hidden = True

    # –°—Ç—Ä–æ–∫–∏ "–î–æ—Å—Ç–∞–≤–∫–∞" (43) –∏ "–ò—Ç–æ–≥–æ" (44) ‚Äî –≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º—ã
    ws_calc.row_dimensions[99].hidden = False
    ws_calc.row_dimensions[100].hidden = False

    wb.save(OUTPUT_FILE)
    return OUTPUT_FILE


def import_data(deal_id):
    print("1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Å–¥–µ–ª–∫–∏...")
    rows = get_deal_products(deal_id)
    if not rows:
        print("‚ùå –í —Å–¥–µ–ª–∫–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        return

    print("2Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞...")
    products_for_excel = []

    for row in rows:
        print(row)
        product_id = row.get("PRODUCT_ID")
        name = row.get("PRODUCT_NAME", "").strip()
        quantity = row.get("QUANTITY", 1)
        price_with_vat = row.get("PRICE", 0)

        # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–ª–∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É
        if not name:
            name = f"–¢–æ–≤–∞—Ä ID={product_id}" if product_id else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä"

        catalog_data = None
        if product_id:
            catalog_data = get_catalog_product(product_id)

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
        product = catalog_data.get("product", {}) if catalog_data else {}
        print(json.dumps(product, indent=2, ensure_ascii=False))
        # # –ü–æ—Å—Ç–∞–≤—â–∏–∫
        # supplier_enum = product.get("property196", {}).get("valueEnum", "")
        # supplier_info = SUPPLIER_MAP.get(supplier_enum, {
        #     "name": supplier_enum or "–ù–µ —É–∫–∞–∑–∞–Ω",
        #     "vat_in": "–ù–î–° 20%",
        #     "shipping_city": "–ú–æ—Å–∫–≤–∞"
        # })

        # –ì–∞–±–∞—Ä–∏—Ç—ã –∏ –≤–µ—Å
        weight_g = product.get("weight", 0)
        if weight_g == 0 or weight_g == None:
            weight_g = (product.get("property232") or {}).get("value", 0)
            print(weight_g)
        length_mm = product.get("length", 0)
        width_mm = product.get("width", 0)
        height_mm = product.get("height", 0)
        supplier = (product.get("property228") or {}).get("value", 0)
        vat_in = (product.get("property236") or {}).get("value", 0)
        link = (product.get("property206") or {}).get("value", "")
        price_purchase = (product.get("property216") or {}).get("value", 0)
        volume_m3 = (product.get("property214") or {}).get("value", 0)
        bron = (product.get("property242") or {}).get("value", 0)
        actual = (product.get("property240") or {}).get("value", "")
        # adress= product.get("property242", {}).get("value", 0)

        products_for_excel.append({
            "product_id": product_id,
            "name": name,
            "quantity": quantity,
            "price_with_vat": price_with_vat,
            "supplier": supplier,
            "shipping_city": "–ú–æ—Å–∫–≤–∞",
            "weight_g": weight_g,
            "length_mm": length_mm,
            "width_mm": width_mm,
            "height_mm": height_mm,
            "vat_in": vat_in,
            "link": link,
            "price_purchase": price_purchase,
            "volume_m3": volume_m3,
            "bron": bron,
            "actual": actual
        })
    print(products_for_excel.append)

    print("3Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω—è–µ–º Excel...")
    output_file = fill_excel(products_for_excel, deal_id)
    print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_file}")

def create_products_from_tovary(deal_id, webhook_url=WEBHOOK_URL, output_dir=OUTPUT_DIR):
    """
    –°–æ–∑–¥–∞—ë—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Å—Ç—Ä–æ–∫ –ª–∏—Å—Ç–∞ '–¢–æ–≤–∞—Ä—ã', —É –∫–æ—Ç–æ—Ä—ã—Ö PRODUCT_ID –ø—É—Å—Ç–æ–π –∏–ª–∏ —Ä–∞–≤–µ–Ω 0.
    –ï—Å–ª–∏ NAME –ø—É—Å—Ç–æ–µ, –Ω–æ –µ—Å—Ç—å PRODUCT_NAME ‚Äî –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ NAME.
    –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π PRODUCT_ID –æ–±—Ä–∞—Ç–Ω–æ –≤ Excel.
    """
    input_file = os.path.join(output_dir, str(deal_id), f"—Ä–∞—Å—á–µ—Ç_{deal_id}.xlsx")
    if not os.path.exists(input_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_file}")
        return

    wb = load_workbook(input_file)
    if "–¢–æ–≤–∞—Ä—ã" not in wb.sheetnames:
        print("‚ùå –õ–∏—Å—Ç '–¢–æ–≤–∞—Ä—ã' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Excel")
        return

    ws = wb["–¢–æ–≤–∞—Ä—ã"]

    # –ß–∏—Ç–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    headers = []
    col = 1
    while True:
        val = ws.cell(row=1, column=col).value
        if not val:
            break
        headers.append(str(val).strip())
        col += 1

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ PRODUCT_ID
    try:
        product_id_col = headers.index("PRODUCT_ID") + 1
    except ValueError:
        print("‚ùå –í –ª–∏—Å—Ç–µ '–¢–æ–≤–∞—Ä—ã' –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ PRODUCT_ID")
        return

    row_idx = 3  # –Ω–∞—á–∏–Ω–∞–µ–º —Å 3-–π —Å—Ç—Ä–æ–∫–∏, —Ç.–∫. 2-—è —Å—Ç—Ä–æ–∫–∞ ‚Äî —Ä—É—Å—Å–∫–∏–µ –ø–æ–¥–ø–∏—Å–∏
    created_count = 0

    while True:
        row_data = {}
        empty = True
        for col_idx, key in enumerate(headers, start=1):
            val = ws.cell(row=row_idx, column=col_idx).value
            if val not in (None, ""):
                empty = False
            row_data[key] = val
        if empty:
            break

        product_id = row_data.get("PRODUCT_ID")
        name = str(row_data.get("NAME") or "").strip()
        product_name = str(row_data.get("PRODUCT_NAME") or "").strip()

        # –ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞: –µ—Å–ª–∏ NAME –ø—É—Å—Ç–æ–µ, –Ω–æ –µ—Å—Ç—å PRODUCT_NAME ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if not name and product_name:
            name = product_name

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—É—Å—Ç–æ–π –∏–ª–∏ 0 –ª—é–±–æ–≥–æ —Ç–∏–ø–∞
        is_manual = False
        if product_id is None or str(product_id).strip() == "":
            is_manual = True
        else:
            try:
                if float(product_id) == 0:
                    is_manual = True
            except:
                pass

        if is_manual and name:
            fields = {"NAME": name}

            if row_data.get("PRICE") not in (None, ""):
                try:
                    fields["PRICE"] = float(row_data["PRICE"])
                except:
                    pass

            if row_data.get("CURRENCY_ID"):
                fields["CURRENCY_ID"] = str(row_data["CURRENCY_ID"])

            if row_data.get("VAT_INCLUDED") in ("Y", "N"):
                fields["VAT_INCLUDED"] = row_data["VAT_INCLUDED"]

            # –í—Å–µ PROPERTY_XXX ‚Üí {"value": ...}
            for key, value in row_data.items():
                if key.startswith("PROPERTY_") and value not in (None, ""):
                    fields[key] = {"value": value}

            url = f"{webhook_url}crm.product.add"
            payload = {"fields": fields}
            try:
                resp = requests.post(url, json=payload)
                resp.raise_for_status()
                result = resp.json()
                new_id = result.get("result")
                if new_id:
                    ws.cell(row=row_idx, column=product_id_col, value=new_id)
                    created_count += 1
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–æ–≤–∞—Ä ID={new_id} –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {row_idx} (\"{name}\")")
                else:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {row_idx}: {result}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {row_idx}: {e}")
                if 'resp' in locals():
                    print(resp.text)

        row_idx += 1

    if created_count > 0:
        wb.save(input_file)
        print(f"üíæ Excel –æ–±–Ω–æ–≤–ª—ë–Ω: –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–æ–≤—ã–µ PRODUCT_ID ({created_count} —Ç–æ–≤–∞—Ä–æ–≤).")
    else:
        print("‚ÑπÔ∏è –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ: —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä" ===
def _read_products_from_calculator(wb):
    """
    –ß–∏—Ç–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã —Å –ª–∏—Å—Ç–∞ '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä' (—Å—Ç—Ä–æ–∫–∏ 3‚Äì42).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∫–ª—é—á–∞–º–∏:
    - product_id (int –∏–ª–∏ None)
    - name (str)
    - quantity (int)
    - price_unit (float) ‚Äî —Ü–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ V (22)
    """
    ws_calc = wb["–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"]
    rows = []
    for row in range(3, 43):
        product_id_raw = ws_calc.cell(row=row, column=2).value  # B
        name = str(ws_calc.cell(row=row, column=3).value or "").strip()  # C
        qty_raw = ws_calc.cell(row=row, column=4).value  # D
        price_unit_raw = ws_calc.cell(row=row, column=22).value  # V ‚Äî —Ü–µ–Ω–∞ –∑–∞ —à—Ç—É–∫—É (–õ–®–û)

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        if name.lower() in ("–¥–æ—Å—Ç–∞–≤–∫–∞", "–∏—Ç–æ–≥–æ"):
            continue

        # –°—Ç–æ–ø –Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö
        if product_id_raw in (None, "") and not name and qty_raw in (None, "") and price_unit_raw in (None, ""):
            break

        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
        try:
            product_id = int(float(product_id_raw)) if product_id_raw not in (None, "") else None
        except (ValueError, TypeError):
            product_id = None

        try:
            quantity = int(float(qty_raw)) if qty_raw not in (None, "") else 1
        except (ValueError, TypeError):
            quantity = 1

        try:
            price_unit = float(price_unit_raw) if price_unit_raw not in (None, "") else 0.0
        except (ValueError, TypeError):
            price_unit = 0.0

        rows.append({
            "product_id": product_id,
            "name": name,
            "quantity": quantity,
            "price_unit": price_unit,
        })
    return rows


# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ: —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ "–¢–æ–≤–∞—Ä—ã" ===
def _read_products_from_products_sheet(wb):
    """
    –ß–∏—Ç–∞–µ—Ç –ª–∏—Å—Ç '–¢–æ–≤–∞—Ä—ã' c –¥–≤—É—Ö—Å—Ç—Ä–æ—á–Ω–æ–π —à–∞–ø–∫–æ–π:
    - –°—Ç—Ä–æ–∫–∞ 1: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–º–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, PRODUCT_ID, PROPERTY_216)
    - –°—Ç—Ä–æ–∫–∞ 2: —Ä—É—Å—Å–∫–∏–µ –º–µ—Ç–∫–∏
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –≥–¥–µ –∫–ª—é—á–∏ ‚Äî —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–º–µ–Ω–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ 1.
    """
    if "–¢–æ–≤–∞—Ä—ã" not in wb.sheetnames:
        return []

    ws = wb["–¢–æ–≤–∞—Ä—ã"]

    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–º–µ–Ω–∞ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    technical_headers = []
    col = 1
    while True:
        val = ws.cell(row=1, column=col).value
        if val is None:
            break
        technical_headers.append(str(val).strip())
        col += 1

    if not technical_headers:
        return []

    # –°—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞—á–∏–Ω–∞—è —Å 3-–π
    rows = []
    row_idx = 3
    while True:
        # –ï—Å–ª–∏ –≤—Å—è —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º
        empty = True
        row_data = {}
        for col_idx, tech_name in enumerate(technical_headers, start=1):
            val = ws.cell(row=row_idx, column=col_idx).value
            if val not in (None, ""):
                empty = False
            row_data[tech_name] = val
        if empty:
            break
        rows.append(row_data)
        row_idx += 1

    return rows


# === Bitrix: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Å–¥–µ–ª–∫–∏ ===
def _bitrix_set_rows(deal_id, rows, webhook_url=WEBHOOK_URL):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Å–¥–µ–ª–∫–∏ (–ø–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞).
    –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç rows: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π Bitrix crm.deal.productrows.set
    """
    url = f"{webhook_url}crm.deal.productrows.set"
    payload = {"id": deal_id, "rows": rows}
    resp = requests.post(url, json=payload)
    try:
        resp.raise_for_status()
        print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫ –≤ —Å–¥–µ–ª–∫–µ {deal_id}.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç—Ä–æ–∫ —Å–¥–µ–ª–∫–∏: {e}")
        print("–û—Ç–≤–µ—Ç Bitrix24:", getattr(resp, "text", ""))


# === Bitrix: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ ===
def _bitrix_update_product(product_id, fields, webhook_url=WEBHOOK_URL):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ crm.product.update (–∏–ª–∏ catalog.product.update –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ—Ä—Ç–∞–ª–∞).
    –ü–æ —Ç–≤–æ–µ–π –ª–æ–≥–∏–∫–µ –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è crm.product.update.
    fields: —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, NAME, PRICE, VAT_INCLUDED, CURRENCY_ID)
    """
    url = f"{webhook_url}crm.product.update"
    payload = {"id": product_id, "fields": fields}
    resp = requests.post(url, json=payload)
    try:
        resp.raise_for_status()
        print(f"‚úÖ –¢–æ–≤–∞—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ {product_id} –æ–±–Ω–æ–≤–ª—ë–Ω: {fields}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")
        print("–û—Ç–≤–µ—Ç Bitrix24:", getattr(resp, "text", ""))


def export_data(deal_id, webhook_url=WEBHOOK_URL, output_dir=OUTPUT_DIR, update_catalog=True):


    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel –æ–±—Ä–∞—Ç–Ω–æ –≤ Bitrix24:
    1) –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Å–¥–µ–ª–∫–∏ (crm.deal.productrows.set).
    2) –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–∞ (crm.product.update) –ø–æ –¥–∞–Ω–Ω—ã–º –ª–∏—Å—Ç–∞ "–¢–æ–≤–∞—Ä—ã".
    –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ Bitrix24 –≤ JSON.
    """
    #—Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    create_products_from_tovary(deal_id)
    
    input_file = os.path.join(output_dir, str(deal_id), f"—Ä–∞—Å—á–µ—Ç_{deal_id}.xlsx")
    if not os.path.exists(input_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_file}")
        return

    wb = load_workbook(input_file, data_only=True)

    # === 1. –ß–∏—Ç–∞–µ–º –ª–∏—Å—Ç "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä" ===
    ws_calc = wb["–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"]
    deal_rows_payload = []

    for row in range(3, 43):
        product_id_raw = ws_calc.cell(row=row, column=2).value  # B
        name = str(ws_calc.cell(row=row, column=3).value or "").strip()  # C
        qty_raw = ws_calc.cell(row=row, column=4).value  # D
        price_unit_raw = ws_calc.cell(row=row, column=22).value  # V ‚Äî —Ü–µ–Ω–∞ –∑–∞ —à—Ç—É–∫—É

        if not any([product_id_raw, name, qty_raw, price_unit_raw]):
            continue
        if name.lower() in ("–¥–æ—Å—Ç–∞–≤–∫–∞", "–∏—Ç–æ–≥–æ"):
            continue

        try:
            product_id = int(float(product_id_raw)) if product_id_raw else None
        except:
            product_id = None

        try:
            quantity = int(float(qty_raw)) if qty_raw else 1
        except:
            quantity = 1

        try:
            price_unit = float(price_unit_raw) if price_unit_raw else 0.0
        except:
            price_unit = 0.0

        row_payload = {
            "QUANTITY": quantity,
            "PRICE": price_unit,
            "TAX_RATE": "20.00",
            "TAX_INCLUDED": "Y",
            "CUSTOMIZED": "Y",
        }

        if product_id:
            row_payload["PRODUCT_ID"] = product_id
            if name:
                row_payload["PRODUCT_NAME"] = name
        else:
            row_payload["PRODUCT_NAME"] = name or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

        deal_rows_payload.append(row_payload)

    # === –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å–¥–µ–ª–∫–∏ ===
    if deal_rows_payload:
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(deal_rows_payload)} —Å—Ç—Ä–æ–∫ –≤ —Å–¥–µ–ª–∫—É {deal_id}...")
        url = f"{webhook_url}crm.deal.productrows.set"
        payload = {"id": deal_id, "rows": deal_rows_payload}
        try:
            resp = requests.post(url, json=payload)
            print("‚û°Ô∏è –û—Ç–≤–µ—Ç Bitrix24 (crm.deal.productrows.set):")
            print(json.dumps(resp.json(), indent=2, ensure_ascii=False))
            resp.raise_for_status()
            print("‚úÖ –°—Ç—Ä–æ–∫–∏ —Å–¥–µ–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫ —Å–¥–µ–ª–∫–∏: {e}")
            if 'resp' in locals():
                print(resp.text)

    # === 2. –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥ –∏–∑ –ª–∏—Å—Ç–∞ "–¢–æ–≤–∞—Ä—ã" ===
    if update_catalog and "–¢–æ–≤–∞—Ä—ã" in wb.sheetnames:
        ws_prod = wb["–¢–æ–≤–∞—Ä—ã"]

        # –ß–∏—Ç–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        headers = []
        col = 1
        while True:
            val = ws_prod.cell(row=1, column=col).value
            if not val:
                break
            headers.append(str(val).strip())
            col += 1

        # –ß–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –Ω–∞—á–∏–Ω–∞—è —Å 3-–π
        row_idx = 3
        while True:
            row_data = {}
            empty = True
            for col_idx, key in enumerate(headers, start=1):
                val = ws_prod.cell(row=row_idx, column=col_idx).value
                if val not in (None, ""):
                    empty = False
                row_data[key] = val
            if empty:
                break

            product_id = row_data.get("PRODUCT_ID")
            name = str(row_data.get("NAME") or "").strip()

            if not product_id or not name:
                row_idx += 1
                continue

            fields = {"NAME": name}

            if row_data.get("PRICE") not in (None, ""):
                try:
                    fields["PRICE"] = float(row_data["PRICE"])
                except:
                    pass

            if row_data.get("CURRENCY_ID"):
                fields["CURRENCY_ID"] = str(row_data["CURRENCY_ID"])

            if row_data.get("VAT_INCLUDED") in ("Y", "N"):
                fields["VAT_INCLUDED"] = row_data["VAT_INCLUDED"]

            # –í—Å–µ PROPERTY_XXX ‚Üí {"value": ...}
            for key, value in row_data.items():
                if key.startswith("PROPERTY_") and value not in (None, ""):
                    fields[key] = {"value": value}

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            try:
                url = f"{webhook_url}crm.product.update"
                payload = {"id": product_id, "fields": fields}
                resp = requests.post(url, json=payload)
                print(f"‚û°Ô∏è –û—Ç–≤–µ—Ç Bitrix24 (crm.product.update, ID={product_id}):")
                try:
                    print(json.dumps(resp.json(), indent=2, ensure_ascii=False))
                except:
                    print(resp.text)
                resp.raise_for_status()
                print(f"‚úÖ –¢–æ–≤–∞—Ä {product_id} –æ–±–Ω–æ–≤–ª—ë–Ω.")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")
                if 'resp' in locals():
                    print(resp.text)

            row_idx += 1

    print("üéØ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω: —Å—Ç—Ä–æ–∫–∏ —Å–¥–µ–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –∫–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª—ë–Ω.")


def export_data_–ö–ï–î–û(deal_id):
    print("\nüì§ –≠–ö–°–ü–û–†–¢ –ö–ï–î–û (—Ü–µ–Ω—ã –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ x = 24)")
    _export_data_with_price_column(
        deal_id,
        price_col_index=24,  # –∫–æ–ª–æ–Ω–∫–∞ —Ö
        tax_rate="0.00",  # –ë–µ–∑ –ù–î–°
        tax_included="N",  # –ù–î–° –Ω–µ –≤–∫–ª—é—á—ë–Ω –≤ —Ü–µ–Ω—É
        supplier_name="–ò–ü",
        mode="–ö–ï–î–û"
    )


def export_data_Verch(deal_id):
    print("\nüì§ –≠–ö–°–ü–û–†–¢ –í–ï–†–® (—Ü–µ–Ω—ã –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ W = 23)")
    _export_data_with_price_column(
        deal_id,
        price_col_index=23,  # –∫–æ–ª–æ–Ω–∫–∞ T
        tax_rate="0.00",  # –ë–µ–∑ –ù–î–°
        tax_included="N",  # –ù–î–° –Ω–µ –≤–∫–ª—é—á—ë–Ω
        supplier_name="–ò–ü",
        mode="–í–µ—Ä—à"
    )


def export_data_LSO(deal_id):
    print("\nüì§ –≠–ö–°–ü–û–†–¢ –õ–®–û (—Ü–µ–Ω—ã –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ V = 22)")
    _export_data_with_price_column(
        deal_id,
        price_col_index=22,  # –∫–æ–ª–æ–Ω–∫–∞ Q ‚Äî "–¶–µ–Ω–∞ –õ–®–û"
        tax_rate="20.00",  # –ù–î–° 20%
        tax_included="Y",  # –ù–î–° –≤–∫–ª—é—á—ë–Ω –≤ —Ü–µ–Ω—É
        supplier_name="–ò–ü",
        mode="–õ–®–û"
    )


def _export_data_with_price_column(deal_id, price_col_index, tax_rate, tax_included, supplier_name, mode):
    input_file = os.path.join(OUTPUT_DIR, str(deal_id), f"—Ä–∞—Å—á–µ—Ç_{deal_id}.xlsx")
    if not os.path.exists(input_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_file}")
        return

    wb = load_workbook(input_file, data_only=True)
    ws = wb["–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"]

    new_rows = []
    for row in range(3, 43):
        product_id_raw = ws.cell(row=row, column=2).value  # B
        name = str(ws.cell(row=row, column=3).value or "").strip()

        if not name or name.lower() in ("–¥–æ—Å—Ç–∞–≤–∫–∞", "–∏—Ç–æ–≥–æ"):
            if product_id_raw in (None, "") and not name:
                break
            # "–î–æ—Å—Ç–∞–≤–∫–∞" –∏ "–ò—Ç–æ–≥–æ" –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ —Ç–æ–≤–∞—Ä—ã

        try:
            product_id = int(float(product_id_raw)) if product_id_raw not in (None, "") else 0
        except (ValueError, TypeError):
            product_id = 0

        quantity_raw = ws.cell(row=row, column=4).value  # D
        price_raw = ws.cell(row=row, column=price_col_index).value  # –Ω—É–∂–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞

        quantity = int(float(quantity_raw)) if quantity_raw not in (None, "") else 1
        price = float(price_raw) if price_raw not in (None, "") else 0.0

        row_data = {
            "QUANTITY": quantity,
            "PRICE": price,
            "TAX_RATE": tax_rate,
            "TAX_INCLUDED": tax_included,
        }

        if product_id == 0:
            if name:
                row_data["PRODUCT_NAME"] = name
                new_rows.append(row_data)
        else:
            row_data["PRODUCT_ID"] = product_id
            new_rows.append(row_data)

        print(f"   ‚úÖ {name} ‚Üí {price} —Ä—É–±, –ù–î–°: {tax_rate}, –í–∫–ª—é—á—ë–Ω: {tax_included}")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Bitrix24
    try:
        response = requests.post(
            f"{WEBHOOK_URL}crm.deal.productrows.set",
            json={"id": deal_id, "rows": new_rows}
        )
        response.raise_for_status()
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ({mode})!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ {mode}: {e}")
        if 'response' in locals():
            print(f"–û—Ç–≤–µ—Ç Bitrix24:", json.dumps(response.text))


def generate_3kp(deal_id):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 3 –ö–ü:
    - –ö–ï–î–û (—Ü–µ–Ω—ã –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ U)
    - –í–µ—Ä—à (—Ü–µ–Ω—ã –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ T)
    """
    print(f"üñ®Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 3 –ö–ü –¥–ª—è —Å–¥–µ–ª–∫–∏ {deal_id}...")

    # –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –ö–ï–î–û
    print("\n‚û°Ô∏è –≠–∫—Å–ø–æ—Ä—Ç –ö–ï–î–û...")
    export_data_–ö–ï–î–û(deal_id)
    generate_KP(deal_id, 50)
    print("\n‚û°Ô∏è –≠–∫—Å–ø–æ—Ä—Ç –í–µ—Ä—Ö–æ–∑–∏–Ω–∞...")
    export_data_Verch(deal_id)
    generate_KP(deal_id, 48)
    print("\n‚û°Ô∏è –≠–∫—Å–ø–æ—Ä—Ç –õ–®–û...")
    export_data_LSO(deal_id)
    generate_KP(deal_id, 46)

    print("\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 3 –ö–ü –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

def generate_kp_lsho(deal_id):
    export_data_LSO(deal_id)
    generate_KP(deal_id, 46)

def generate_kp_verch(deal_id):
    export_data_Verch(deal_id)
    generate_KP(deal_id, 48)


def generate_KP(entity_id, template_id=46, webhook_url=WEBHOOK_URL, entity_type_id=2, output_dir="–†–∞—Å—á–µ—Ç—ã"):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ crm.documentgenerator.document.add —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫,
    –∏–º–∏—Ç–∏—Ä—É—è BX24.callMethod, –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥.

    Args:
        entity_id (str or int): ID —Å—É—â–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–¥–µ–ª–∫–∏).
        template_id (int): ID —à–∞–±–ª–æ–Ω–∞:
            46 ‚Üí "–ö–ü –õ–®–û",
            48 ‚Üí "–ö–ü –í–µ—Ä—Ö–æ–∑–∏–Ω–∞",
            50 ‚Üí "–ö–ü –ö–ï–î–û",
            52 ‚Üí "–ö–ü –õ–®–û —Å —Ñ–æ—Ç–æ".
        webhook_url (str): URL –≤–µ–±—Ö—É–∫–∞ Bitrix24.
        entity_type_id (int or str): –¢–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏ (2 = —Å–¥–µ–ª–∫–∞).
        output_dir (str): –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤.

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç API + –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É (–µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ).
    """

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –ø–æ template_id
    template_names = {
        46: "–ö–ü –õ–®–û",
        48: "–ö–ü –í–µ—Ä—Ö–æ–∑–∏–Ω–∞",
        50: "–ö–ü –ö–ï–î–û",
        52: "–ö–ü –õ–®–û —Å —Ñ–æ—Ç–æ"
    }
    template_name = template_names.get(template_id, f"–ö–ü_—à–∞–±–ª–æ–Ω_{template_id}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É

    full_path = os.path.join(OUTPUT_DIR, str(entity_id), f"{template_name}_{entity_id}.docx")

    def download_document(download_url, save_path):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏."""
        if not download_url:
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç downloadUrl –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
            return None

        try:
            os.makedirs(os.path.dirname(save_path), exist_ok=True)
            print(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ URL: {download_url}")
            resp = requests.get(download_url)
            resp.raise_for_status()

            with open(save_path, 'wb') as f:
                f.write(resp.content)
            print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {save_path}")
            return save_path

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            return None

    # --- –û—Å–Ω–æ–≤–Ω–æ–π –≤—ã–∑–æ–≤ API ---
    api_method = 'crm.documentgenerator.document.add'
    url = f"{webhook_url.rstrip('/')}/{api_method}.json"

    payload = {
        'templateId': template_id,
        'entityTypeId': entity_type_id,
        'entityId': entity_id
    }

    print(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥ {api_method} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {payload}")
    print(f"URL –∑–∞–ø—Ä–æ—Å–∞: {url}")

    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()
        result = response.json()

        print("--- –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞ API ---")
        print(json.dumps(result, indent=2, ensure_ascii=False))

        if 'result' in result and 'document' in result['result']:
            download_url = result['result']['document'].get('downloadUrlMachine')
            if download_url:
                saved_path = download_document(download_url, full_path)
                if saved_path:
                    result['downloaded_file'] = saved_path
            else:
                print("‚ö†Ô∏è –í –æ—Ç–≤–µ—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç downloadUrl.")
            print("–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
            return result
        else:
            print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API: {result}")
            return result

    except requests.exceptions.HTTPError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {e}")
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}")
        try:
            error_details = response.json()
        except Exception:
            error_details = response.text
        return {"error": f"HTTP {response.status_code}", "details": error_details}
    except Exception as e:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return {"error": str(e)}


def main():
    # import_data(DEAL_ID)
    # export_data(DEAL_ID)
    generate_3kp(DEAL_ID)


# === –ó–∞–ø—É—Å–∫ ===
def get_deal(DEAL_ID):
    url = f"{WEBHOOK_URL}crm.deal.get"
    response = requests.post(url, json={"id": DEAL_ID})
    response.raise_for_status()
    return response.json().get("result", {})


def fill_deal_sheet(worksheet, deal_data, deal_id, start_row=2):
    """
    –ó–∞–ø–æ–ª–Ω—è–µ—Ç –≤–∫–ª–∞–¥–∫—É "–°–¥–µ–ª–∫–∞" –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ —Å–¥–µ–ª–∫–∏
    –ö–æ–ª–æ–Ω–∫–∞ A - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è (–∫–∞–∫ –≤ –ë–∏—Ç—Ä–∏–∫—Å–µ), –∫–æ–ª–æ–Ω–∫–∞ B - –∑–Ω–∞—á–µ–Ω–∏–µ
    """
    # print("–ó–∞–ø–æ–ª–Ω—è–µ–º –≤–∫–ª–∞–¥–∫—É '–°–¥–µ–ª–∫–∞'...")
    # print(f"deal_data keys: {list(deal_data.keys())[:10]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∫–ª—é—á–µ–π

    current_row = start_row

    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: –ø–æ–ª–µ -> –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    field_names = {
        # 'ID': '–ù–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏',
        # 'TITLE': '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏',
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è
        'UF_CRM_TP_1': '–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏',
        'UF_CRM_TP_2': '–¶–µ–Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞',
        'UF_CRM_TP_3': '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫',
        'UF_CRM_TP_4': '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫',
        'UF_CRM_TP_5': '–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏',
        'UF_CRM_TP_6': '–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞',
        'UF_CRM_TP_MARKS': '–ú–µ—Ç–∫–∏',
        'UF_CRM_TP_7': '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –¢–µ–Ω–¥–µ—Ä–ø–ª–∞–Ω–µ',
        'UF_CRM_TP_8': '–¢–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è',
        'UF_CRM_TP_9': '–ó–∞–∫–æ–Ω/–ü–ª–æ—â–∞–¥–∫–∞',
        'UF_CRM_TP_10': '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –ø–ª–æ—â–∞–¥–∫–µ',
        'UF_CRM_TP_11': '–ù–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞',
        'UF_CRM_TP_12': '–†–∞–∑–º–µ—Ä –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤',
        'UF_CRM_TP_13': '–î–∞—Ç–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∏ –æ—Ü–µ–Ω–∫–∏ –∑–∞—è–≤–æ–∫',
        'UF_CRM_TP_14': '–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞',
        'UF_CRM_TP_15': '–î–∞—Ç–∞ –ø–æ–¥–≤–µ–¥–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤',
        'UF_CRM_TP_16': '–ò–ù–ù –∑–∞–∫–∞–∑—á–∏–∫–∞',
        'UF_CRM_1757398708466': '–¢—Ä–µ–±—É–µ—Ç—Å—è –º–æ–Ω—Ç–∞–∂/–ø—É—Å–∫–æ–Ω–∞–ª–∞–¥–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã',
        'UF_CRM_1757398736633': '–¢—Ä–µ–±—É–µ—Ç—Å—è –û–±—É—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤',
        'UF_CRM_1757398787387': '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏',
        'UF_CRM_1757398866815': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π:',
        'UF_CRM_1757398927169': '–°—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞:',
        'UF_CRM_1757402422471': '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞',
        'UF_CRM_1757402456572': '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞',
        'UF_CRM_1757912892451': '–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞',
        'UF_CRM_1757916728790': '–í—ã–±—Ä–∞–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
        'UF_CRM_1757929901175': '–ê–Ω–∞–ª–æ–≥–∏',
        'UF_CRM_1757930626746': '–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏',
        'UF_CRM_1757931573446': '–ê–¥—Ä–µ—Å –æ—Ç–≥—Ä—É–∑–∫–∏',
        'UF_CRM_1757999862739': '–î–∞—Ç–∞ –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–π –ø–æ—Å—Ç–∞–≤–∫–∏',
        'UF_CRM_1759603831093': '–ö–æ–º–ø–∞–Ω–∏—è –æ—Ç–≥—Ä—É–∑–∫–∏'
    }

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ: —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
    deal_link = f'https://labkabinet.bitrix24.ru/crm/deal/details/{deal_id}/'

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø–æ–ª—è –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ
    for field_name in ['ID', 'TITLE'] + list(field_names.keys()):
        if field_name == 'TITLE':
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ
            worksheet[f'B{current_row}'] = '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏'
            value = deal_data.get(field_name, '')
            worksheet[f'C{current_row}'] = value
            current_row += 1

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–¥–µ–ª–∫—É (—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ)
            worksheet[f'B{current_row}'] = '–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É'
            worksheet[f'C{current_row}'] = deal_link
            current_row += 1
        elif field_name in deal_data:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ
            display_name = field_names.get(field_name, field_name)  # –ï—Å–ª–∏ –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ø–æ–ª—è
            worksheet[f'B{current_row}'] = display_name
            value = deal_data.get(field_name, '')
            if isinstance(value, (dict, list)):
                worksheet[f'C{current_row}'] = str(value)
            else:
                worksheet[f'C{current_row}'] = value
            current_row += 1

    # print(f"–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ '–°–¥–µ–ª–∫–∞' –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ó–∞–ø–∏—Å–∞–Ω–æ {current_row - start_row} —Å—Ç—Ä–æ–∫.")


def products_to_excel(deal_id, output_file=None, catalog_id=None):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame —Å —Ç–æ–≤–∞—Ä–∞–º–∏ —Å–¥–µ–ª–∫–∏,
    –∫–æ–ª–æ–Ω–∫–∏ ‚Äî –≤ –ø–æ—Ä—è–¥–∫–µ COLUMN_LABELS,
    –∑–∞–≥–æ–ª–æ–≤–∫–∏ ‚Äî —Ä—É—Å—Å–∫–∏–µ –º–µ—Ç–∫–∏ –∏–∑ COLUMN_LABELS.
    """
    print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Å–¥–µ–ª–∫–∏ {deal_id}...")

    deal_products = get_deal_products(deal_id)
    if not deal_products:
        print("–í —Å–¥–µ–ª–∫–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        # –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π DataFrame —Å –Ω—É–∂–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏ –∏ —Ä—É—Å—Å–∫–∏–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        return pd.DataFrame(columns=list(COLUMN_LABELS.values()))

    all_rows = []

    for i, product_row in enumerate(deal_products):
        product_id = product_row.get('PRODUCT_ID')
        print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é {i + 1}/{len(deal_products)} (ID: {product_id})")

        catalog_data = get_catalog_element(product_id) if product_id else None

        # –°–æ–±–∏—Ä–∞–µ–º –ø–ª–æ—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å —Å–æ –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        row_data = {}

        # –ü–æ–ª—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å–¥–µ–ª–∫–∏ (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ DEAL_ROW_)
        for k, v in product_row.items():
            row_data[k] = v

        # –ü–æ–ª—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if catalog_data:
            for k, v in catalog_data.items():
                # –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, PRICE –∏–∑ —Å–¥–µ–ª–∫–∏ –≤–∞–∂–Ω–µ–µ)
                if k not in row_data:
                    row_data[k] = v

            # –†–∞—Å–∫—Ä—ã–≤–∞–µ–º PROPERTY_XXX
            for key in list(row_data.keys()):
                if key.startswith('PROPERTY_') and isinstance(row_data[key], dict):
                    row_data[key] = row_data[key].get('value', '')

        # –°–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è
        # row_data['ID —Å—Ç—Ä–æ–∫–∏ –≤ —Å–¥–µ–ª–∫–µ'] = product_row.get('ID')
        # row_data['–ò–∑ –∫–∞—Ç–∞–ª–æ–≥–∞?'] = catalog_data is not None

        all_rows.append(row_data)

    # –°–æ–∑–¥–∞—ë–º DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ –≤ –ø–æ—Ä—è–¥–∫–µ COLUMN_LABELS (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–º–µ–Ω–∞)
    technical_columns = list(COLUMN_LABELS.keys())
    df = pd.DataFrame(all_rows, columns=technical_columns)

    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–µ –º–µ—Ç–∫–∏ (–≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ!)
    df.rename(columns=COLUMN_LABELS, inplace=True)

    return df

def create_products_from_tovary(deal_id, webhook_url=WEBHOOK_URL, output_dir=OUTPUT_DIR):
    """
    –°–æ–∑–¥–∞—ë—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Å—Ç—Ä–æ–∫ –ª–∏—Å—Ç–∞ '–¢–æ–≤–∞—Ä—ã', —É –∫–æ—Ç–æ—Ä—ã—Ö PRODUCT_ID –ø—É—Å—Ç–æ–π –∏–ª–∏ —Ä–∞–≤–µ–Ω 0.
    –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π PRODUCT_ID –æ–±—Ä–∞—Ç–Ω–æ –≤ Excel.
    """
    input_file = os.path.join(output_dir, str(deal_id), f"—Ä–∞—Å—á–µ—Ç_{deal_id}.xlsx")
    if not os.path.exists(input_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_file}")
        return

    wb = load_workbook(input_file)
    if "–¢–æ–≤–∞—Ä—ã" not in wb.sheetnames:
        print("‚ùå –õ–∏—Å—Ç '–¢–æ–≤–∞—Ä—ã' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Excel")
        return

    ws = wb["–¢–æ–≤–∞—Ä—ã"]

    # –ß–∏—Ç–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    headers = []
    col = 1
    while True:
        val = ws.cell(row=1, column=col).value
        if not val:
            break
        headers.append(str(val).strip())
        col += 1

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ PRODUCT_ID
    try:
        product_id_col = headers.index("PRODUCT_ID") + 1
    except ValueError:
        print("‚ùå –í –ª–∏—Å—Ç–µ '–¢–æ–≤–∞—Ä—ã' –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ PRODUCT_ID")
        return

    row_idx = 3
    created_count = 0

    while True:
        row_data = {}
        empty = True
        for col_idx, key in enumerate(headers, start=1):
            val = ws.cell(row=row_idx, column=col_idx).value
            if val not in (None, ""):
                empty = False
            row_data[key] = val
        if empty:
            break

        product_id = row_data.get("PRODUCT_ID")
        name = str(row_data.get("NAME") or "").strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—É—Å—Ç–æ–π –∏–ª–∏ "0" –ª—é–±–æ–≥–æ —Ç–∏–ø–∞
        is_manual = (product_id is None) or (str(product_id).strip() in ("", "0", "0.0"))

        if is_manual and name:
            fields = {"NAME": name}

            if row_data.get("PRICE") not in (None, ""):
                try:
                    fields["PRICE"] = float(row_data["PRICE"])
                except:
                    pass

            if row_data.get("CURRENCY_ID"):
                fields["CURRENCY_ID"] = str(row_data["CURRENCY_ID"])

            if row_data.get("VAT_INCLUDED") in ("Y", "N"):
                fields["VAT_INCLUDED"] = row_data["VAT_INCLUDED"]

            # –í—Å–µ PROPERTY_XXX ‚Üí {"value": ...}
            for key, value in row_data.items():
                if key.startswith("PROPERTY_") and value not in (None, ""):
                    fields[key] = {"value": value}

            url = f"{webhook_url}crm.product.add"
            payload = {"fields": fields}
            try:
                resp = requests.post(url, json=payload)
                resp.raise_for_status()
                result = resp.json()
                new_id = result.get("result")
                if new_id:
                    ws.cell(row=row_idx, column=product_id_col, value=new_id)
                    created_count += 1
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–æ–≤–∞—Ä ID={new_id} –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {row_idx} (\"{name}\")")
                else:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {row_idx}: {result}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {row_idx}: {e}")
                if 'resp' in locals():
                    print(resp.text)

        row_idx += 1

    if created_count > 0:
        wb.save(input_file)
        print(f"üíæ Excel –æ–±–Ω–æ–≤–ª—ë–Ω: –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–æ–≤—ã–µ PRODUCT_ID ({created_count} —Ç–æ–≤–∞—Ä–æ–≤).")
    else:
        print("‚ÑπÔ∏è –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


if __name__ == "__main__":
    import_data(DEAL_ID)
    #create_products_from_tovary(DEAL_ID)

    # fill_excel(DEAL_ID)
    # deal_to_exel(DEAL_ID,deal)
    # auto_update_check()
    # import_data(DEAL_ID)
    #export_data(DEAL_ID)
    # generate_3kp(DEAL_ID)
    # main()
