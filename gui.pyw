# gui.py
import os
import subprocess
import sys

import customtkinter as ctk

import main


class StdoutRedirector:
    def __init__(self, text_widget):
        self.text_widget = text_widget
        self.original_stdout = sys.__stdout__

    def write(self, message):
        if not message.strip():
            return

        # === –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å (–≤—Å–µ–≥–¥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ) ===
        self.original_stdout.write(message)
        self.original_stdout.flush()

        # === –í—ã–≤–æ–¥ –≤ GUI ‚Äî —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫ ===
        try:
            if self.text_widget.winfo_exists():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–∏–≤ –ª–∏ –≤–∏–¥–∂–µ—Ç
                self.text_widget.configure(state="normal")
                self.text_widget.insert("end", message)
                self.text_widget.see("end")
                self.text_widget.configure(state="disabled")
                self.text_widget.update_idletasks()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        except Exception:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ GUI (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ)
            pass

    def flush(self):
        self.original_stdout.flush()


# === –ö–ª–∞—Å—Å –¥–ª—è –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫ ===
class ToolTip:
    def __init__(self, widget, text, delay=500):
        self.widget = widget
        self.text = text
        self.delay = delay  # –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º (–º—Å)
        self.tip_window = None
        self.id = None
        self.widget.bind("<Enter>", self.on_enter)
        self.widget.bind("<Leave>", self.on_leave)
        self.widget.bind("<ButtonPress>", self.on_leave)

    def on_enter(self, event=None):
        self.schedule()

    def on_leave(self, event=None):
        self.unschedule()
        self.hide()

    def schedule(self):
        self.unschedule()
        self.id = self.widget.after(self.delay, self.show)

    def unschedule(self):
        if self.id:
            self.widget.after_cancel(self.id)
            self.id = None

    def show(self):
        if self.tip_window or not self.text:
            return
        x = self.widget.winfo_rootx() + 20
        y = self.widget.winfo_rooty() + self.widget.winfo_height() + 5
        self.tip_window = ctk.CTkToplevel(self.widget)
        self.tip_window.wm_overrideredirect(True)
        self.tip_window.wm_geometry(f"+{x}+{y}")
        self.tip_window.attributes("-topmost", True)
        label = ctk.CTkLabel(
            self.tip_window,
            text=self.text,
            fg_color="gray20",
            corner_radius=6,
            padx=8,
            pady=4
        )
        label.pack()
        # –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Ä–æ–¥–∏—Ç–µ–ª—é (—á—Ç–æ–±—ã –∑–∞–∫—Ä—ã–≤–∞–ª–∞—Å—å –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞)
        self.widget.winfo_toplevel().bind("<Destroy>", self.on_destroy, add="+")

    def hide(self):
        if self.tip_window:
            self.tip_window.destroy()
            self.tip_window = None

    def on_destroy(self, event=None):
        self.hide()


class DealApp(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∞–º–∏")
        self.geometry("480x520")  # —É–≤–µ–ª–∏—á–∏–ª –≤—ã—Å–æ—Ç—É –ø–æ–¥ –ª–æ–≥
        self.resizable(False, False)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ctk.CTkLabel(self, text="ID —Å–¥–µ–ª–∫–∏:", font=("Helvetica", 14)).pack(pady=(20, 5))
        self.deal_id_entry = ctk.CTkEntry(self, width=300, font=("Helvetica", 13))
        self.deal_id_entry.pack(pady=5)

        # –ö–Ω–æ–ø–∫–∏ —Å —ç–º–æ–¥–∑–∏ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
        button_data = [
            ("üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ ID —Å–¥–µ–ª–∫–∏", self.import_data),
            ("üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å", "–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—á—ë—Ç –ø–æ —Å–¥–µ–ª–∫–µ", self.calculate),
            ("üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", self.export_data),
            ("üìÑ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å 3–ö–ü", "–°–æ–∑–¥–∞—Ç—å –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", self.generate_3kp),
            ("üìã –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¢–ó", "–°–æ–∑–¥–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ", self.generate_tz),
            ("üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É", "–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏", self.open_folder),
        ]

        self.buttons = []
        for i in range(0, len(button_data), 2):
            frame = ctk.CTkFrame(self, fg_color="transparent")
            frame.pack(pady=8)
            for j in range(2):
                if i + j < len(button_data):
                    text, tooltip, command = button_data[i + j]
                    btn = ctk.CTkButton(
                        frame,
                        text=text,
                        width=200,
                        height=60,
                        font=("Helvetica", 12),
                        command=command
                    )
                    btn.pack(side="left", padx=10)
                    ToolTip(btn, tooltip)
                    self.buttons.append(btn)

        # === –ü–æ–ª–µ –ª–æ–≥–∞ –≤–Ω–∏–∑—É –æ–∫–Ω–∞ ===
        ctk.CTkLabel(self, text="–õ–æ–≥:", font=("Helvetica", 11)).pack(anchor="w", padx=20, pady=(15, 0))
        self.log_textbox = ctk.CTkTextbox(self, height=120, wrap="word", font=("Consolas", 10))
        self.log_textbox.pack(fill="both", padx=20, pady=(5, 15), expand=False)
        self.log_textbox.configure(state="disabled")

        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ print() –≤ GUI
        # sys.stdout = StdoutRedirector(self.log_textbox)

    def show_message(self, title: str, message: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–±–µ–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞)."""
        dialog = ctk.CTkToplevel(self)
        dialog.title(title)
        dialog.geometry("350x120")
        dialog.resizable(False, False)
        dialog.transient(self)
        dialog.grab_set()
        dialog.focus()

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª—è
        self.update_idletasks()
        x = self.winfo_x() + (self.winfo_width() // 2) - 175
        y = self.winfo_y() + (self.winfo_height() // 2) - 60
        dialog.geometry(f"+{x}+{y}")

        ctk.CTkLabel(dialog, text=message, wraplength=300, justify="center").pack(pady=(20, 10))
        ctk.CTkButton(dialog, text="OK", width=80, command=dialog.destroy).pack(pady=(0, 15))

        dialog.bind("<Return>", lambda e: dialog.destroy())
        dialog.bind("<Escape>", lambda e: dialog.destroy())
        dialog.focus_set()

    def get_deal_id(self):
        deal_id = self.deal_id_entry.get().strip()
        if not deal_id:
            deal_id = self.ask_deal_id()  # —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
            if deal_id:
                self.deal_id_entry.delete(0, "end")
                self.deal_id_entry.insert(0, deal_id)
            else:
                return None
        return deal_id

    def ask_deal_id(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ ID —Å–¥–µ–ª–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ."""
        dialog = ctk.CTkToplevel(self)
        dialog.title("–í–≤–µ–¥–∏—Ç–µ ID —Å–¥–µ–ª–∫–∏")
        dialog.geometry("300x120")
        dialog.resizable(False, False)
        dialog.transient(self)
        dialog.grab_set()  # –¥–µ–ª–∞–µ—Ç –æ–∫–Ω–æ –º–æ–¥–∞–ª—å–Ω—ã–º

        ctk.CTkLabel(dialog, text="ID —Å–¥–µ–ª–∫–∏:", font=("Helvetica", 12)).pack(pady=(15, 5))
        entry = ctk.CTkEntry(dialog, width=200, font=("Helvetica", 12))
        entry.pack(pady=5)
        entry.focus()

        result = [None]

        def on_ok():
            result[0] = entry.get().strip()
            dialog.destroy()

        def on_cancel():
            dialog.destroy()

        btn_frame = ctk.CTkFrame(dialog, fg_color="transparent")
        btn_frame.pack(pady=10)
        ctk.CTkButton(btn_frame, text="OK", command=on_ok, width=80).pack(side="left", padx=5)
        ctk.CTkButton(btn_frame, text="–û—Ç–º–µ–Ω–∞", command=on_cancel, width=80).pack(side="left", padx=5)

        # üî• –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞:
        dialog.wait_window()  # ‚Üê –∏–º–µ–Ω–Ω–æ dialog, –∞ –Ω–µ self!

        return result[0]

    def show_error(self, msg):
        self.show_message("–û—à–∏–±–∫–∞", msg)

    def safe_call(self, func, deal_id, success_msg):
        try:
            func(deal_id)
            self.show_message("–ì–æ—Ç–æ–≤–æ", success_msg)
        except Exception as e:
            self.show_error(f"–û—à–∏–±–∫–∞: {e}")

    def import_data(self):
        if deal_id := self.get_deal_id():
            self.safe_call(main.import_data, deal_id, f"–î–∞–Ω–Ω—ã–µ –¥–ª—è {deal_id} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã.")

    def calculate(self):
        if deal_id := self.get_deal_id():
            self.safe_call(main.calculate, deal_id, f"–†–∞—Å—á—ë—Ç –¥–ª—è {deal_id} –∑–∞–≤–µ—Ä—à—ë–Ω.")

    def export_data(self):
        if deal_id := self.get_deal_id():
            self.safe_call(main.export_data, deal_id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã.")

    def generate_3kp(self):
        if deal_id := self.get_deal_id():
            self.safe_call(main.generate_3kp, deal_id, f"3–ö–ü –¥–ª—è {deal_id} —Å–æ–∑–¥–∞–Ω–æ.")

    def generate_tz(self):
        if deal_id := self.get_deal_id():
            self.safe_call(main.generate_tz, deal_id, f"–¢–ó –¥–ª—è {deal_id} —Å–æ–∑–¥–∞–Ω–æ.")

    def open_folder(self):
        deal_id = self.get_deal_id()  # ‚Üê –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –º–µ—Ç–æ–¥
        if not deal_id:
            return  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤–≤–æ–¥

        # –ü—É—Ç—å: —Ç–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞ / –†–∞—Å—á–µ—Ç—ã / {deal_id}
        current_dir = os.path.dirname(os.path.abspath(__file__))
        target_dir = os.path.join(current_dir, "–†–∞—Å—á–µ—Ç—ã", deal_id)

        os.makedirs(target_dir, exist_ok=True)

        try:
            if sys.platform == "win32":
                os.startfile(target_dir)
            elif sys.platform == "darwin":
                subprocess.run(["open", target_dir])
            else:
                subprocess.run(["xdg-open", target_dir])
        except Exception as e:
            self.show_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É:\n{e}")


if __name__ == "__main__":
    app = DealApp()
    app.mainloop()
